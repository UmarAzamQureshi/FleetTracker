import time
import random
import requests
from datetime import datetime, timezone
import math
import threading

SERVER = "http://localhost:8000"
INGEST_ENDPOINT = f"{SERVER}/ingest"
INTERVAL = 3  # seconds

# Sample polyline (street path in Jinnah Garden Islamabad)
JINNAH_GARDEN_ROUTE_1 = [
    (33.57496, 73.16398),
    (33.57468, 73.16447),
    (33.57437, 73.16502),
    (33.57407, 73.16552),
    (33.57397, 73.16570),
    (33.57369, 73.16619),
    (33.57335, 73.16678),
    (33.57360, 73.16698),
    (33.57373, 73.16709),
    (33.57349, 73.16750),
    (33.57308, 73.16821),
    (33.57297, 73.16838),
    (33.57245, 73.16927),
    (33.57283, 73.16956),
    (33.57334, 73.16867),
    (33.57344, 73.16850),
    (33.57392, 73.16768),
    (33.57409, 73.16739),
    (33.57415, 73.16743),
    (33.57446, 73.16771),
    (33.57429, 73.16801),
    (33.57413, 73.16830),
    (33.57405, 73.16844),
    (33.57391, 73.16868),
    (33.57378, 73.16890),
    (33.57363, 73.16914),
    (33.57344, 73.16946),
    (33.57319, 73.16989),
    (33.57355, 73.17019),
    (33.57363, 73.17005),
    (33.57390, 73.16957),
    (33.57410, 73.16921),
    (33.57442, 73.16868),
    (33.57448, 73.16859),
    (33.57475, 73.16808),
    (33.57479, 73.16800),
    (33.57486, 73.16807),
    (33.57503, 73.16820),
    (33.57528, 73.16842),
    (33.57537, 73.16849),
    (33.57554, 73.16865),
    (33.57582, 73.16887),
    (33.57597, 73.16899),
    (33.57592, 73.16908),
    (33.57589, 73.16914),
    (33.57572, 73.16946),
    (33.57557, 73.16971),
    (33.57540, 73.16999),
    (33.57527, 73.17020),
    (33.57516, 73.17042),
    (33.57502, 73.17068),
    (33.57490, 73.17062),
    (33.57475, 73.17067),
    (33.57468, 73.17068),
    (33.57444, 73.17047),
    (33.57442, 73.17051),
    (33.57430, 73.17071),
    (33.57426, 73.17077),
    (33.57421, 73.17086),
    (33.57413, 73.17099),
    (33.57368, 73.17176),
    (33.57335, 73.17152),
    (33.57309, 73.17194),
    (33.57335, 73.17152),
    (33.57368, 73.17176),
    (33.57412, 73.17214),
    (33.57451, 73.17246),
    (33.57455, 73.17249),
    (33.57515, 73.17145),
    (33.57549, 73.17177),
    (33.57492, 73.17275),
    (33.57466, 73.17318),
    (33.57466, 73.17319),
    (33.57504, 73.17350),
    (33.57513, 73.17333),
    (33.57525, 73.17314),
    (33.57555, 73.17263),
    (33.57557, 73.17259),
    (33.57589, 73.17206),
    (33.57615, 73.17162),
    (33.57618, 73.17162),
    (33.57620, 73.17163),
    (33.57621, 73.17163),
    (33.57624, 73.17165),
    (33.57656, 73.17188),
    (33.57678, 73.17206),
    (33.57692, 73.17218),
    (33.57705, 73.17231),
    (33.57713, 73.17238),
    (33.57726, 73.17249),
    (33.57729, 73.17251),
    (33.57744, 73.17262),
    (33.57765, 73.17278),
    (33.57762, 73.17282),
    (33.57762, 73.17283),
    (33.57739, 73.17317),
    (33.57729, 73.17333),
    (33.57719, 73.17351),
    (33.57709, 73.17368),
    (33.57705, 73.17377),
    (33.57688, 73.17406),
    (33.57679, 73.17422),
    (33.57664, 73.17447),
    (33.57648, 73.17475),
    (33.57642, 73.17472),
    (33.57636, 73.17469),
    (33.57630, 73.17467),
    (33.57622, 73.17465),
    (33.57604, 73.17462),
    (33.57556, 73.17452),
    (33.57555, 73.17451),
    (33.57521, 73.17445),
    (33.57507, 73.17442),
    (33.57494, 73.17441),
    (33.57462, 73.17438),
    (33.57417, 73.17435),
    (33.57400, 73.17440),
    (33.57375, 73.17438),
    (33.57374, 73.17398),
    (33.57375, 73.17391),
    (33.57377, 73.17384),
    (33.57380, 73.17379),
    (33.57380, 73.17377),
    (33.57404, 73.17332),
    (33.57430, 73.17291),
    (33.57455, 73.17249),
    (33.57515, 73.17145),
    (33.57518, 73.17140),
    (33.57540, 73.17103),
    (33.57502, 73.17068),
    (33.57516, 73.17042),
    (33.57527, 73.17020),
    (33.57540, 73.16999),
    (33.57557, 73.16971),
    (33.57572, 73.16946),
    (33.57589, 73.16914),
    (33.57592, 73.16908),
    (33.57597, 73.16899),
    (33.57582, 73.16887),
    (33.57554, 73.16865),
    (33.57537, 73.16849),
    (33.57528, 73.16842),
    (33.57503, 73.16820),
    (33.57486, 73.16807),
    (33.57479, 73.16800),
    (33.57446, 73.16771),
    (33.57415, 73.16743),
    (33.57409, 73.16739),
    (33.57381, 73.16715),
    (33.57373, 73.16709),
    (33.57360, 73.16698),
    (33.57335, 73.16678),
    (33.57263, 73.16618),
    (33.57230, 73.16591),
    (33.57225, 73.16587),
    (33.57187, 73.16556),
    (33.57176, 73.16575),
    (33.57160, 73.16603),
    (33.57141, 73.16633),
    (33.57134, 73.16650),
    (33.57107, 73.16692),
    (33.57152, 73.16729),
    (33.57166, 73.16741),
    (33.57180, 73.16752),
    (33.57200, 73.16769),
    (33.57255, 73.16816),
    (33.57231, 73.16858),
    (33.57208, 73.16897),
    (33.57179, 73.16951),
    (33.57163, 73.16981),
    (33.57160, 73.16991),
    (33.57155, 73.17001),
    (33.57152, 73.17007),
    (33.57121, 73.17057),
    (33.57089, 73.17111),
    (33.57083, 73.17122),
    (33.57496, 73.16398),
    (33.57083, 73.17122),
]
JINNAH_GARDEN_ROUTE_2 = [
    (33.56602, 73.17706),
    (33.56659, 73.17708),
    (33.56665, 73.17564),
    (33.56725, 73.17568),
    (33.56722, 73.17661),
    (33.5672, 73.17711),
    (33.56756, 73.17712),
    (33.56783, 73.17714),
    (33.56783, 73.17725),
    (33.56769, 73.17726),
    (33.56715, 73.17722),
    (33.56711, 73.17826),
    (33.5671, 73.17841),
    (33.56709, 73.17869),
    (33.56705, 73.17974),
    (33.56709, 73.17869),
    (33.5671, 73.17841),
    (33.56711, 73.17826),
    (33.56715, 73.17722),
    (33.56659, 73.17719),
    (33.5661, 73.17717),
    (33.56599, 73.17718),
    (33.56599, 73.17706),
    (33.56659, 73.17708),
    (33.5672, 73.17711),
    (33.56756, 73.17712),
    (33.56783, 73.17714),
    (33.56783, 73.17725),
    (33.56769, 73.17726),
    (33.56767, 73.17786),
    (33.56763, 73.17872),
    (33.56762, 73.17881),
    (33.56758, 73.17968),
    (33.56762, 73.17881),
    (33.56763, 73.17872),
    (33.56767, 73.17786),
    (33.56769, 73.17726),
    (33.56715, 73.17722),
    (33.56659, 73.17719),
    (33.5661, 73.17717),
    (33.56599, 73.17718),
    (33.56599, 73.17706),
    (33.56602, 73.17629),
    (33.56603, 73.17591),
    (33.56603, 73.17584),
    (33.56604, 73.1756),
    (33.56623, 73.17561),
    (33.56653, 73.17562),
    (33.56665, 73.17564),
    (33.56725, 73.17568),
    (33.56741, 73.17569),
    (33.56789, 73.17571),
    (33.56789, 73.17572),
    (33.56786, 73.17631),
    (33.56785, 73.17659),
    (33.56783, 73.17714),
    (33.56817, 73.17716),
    (33.5684, 73.17717),
    (33.56844, 73.17625),
    (33.56845, 73.17575),
    (33.569, 73.1758),
    (33.56898, 73.17627),
    (33.56897, 73.17667),
    (33.56896, 73.17721),
    (33.56948, 73.17725),
    (33.57004, 73.17728),
    (33.57009, 73.17626),
    (33.5701, 73.17602),
    (33.5701, 73.17587),
    (33.5701, 73.17582),
    (33.57011, 73.17563),
    (33.57012, 73.17544),
    (33.57013, 73.17533),
    (33.57015, 73.17472),
    (33.56994, 73.17471),
    (33.56965, 73.1747),
    (33.56914, 73.17467),
    (33.5685, 73.17462),
    (33.5685, 73.17461),
    (33.5685, 73.1746),
    (33.56849, 73.1746),
    (33.56849, 73.17459),
    (33.56848, 73.17458),
    (33.56846, 73.17458),
    (33.56842, 73.17457),
    (33.56838, 73.17457),
    (33.56832, 73.17457),
    (33.56824, 73.17456),
    (33.56789, 73.17454),
    (33.56717, 73.17451),
    (33.56681, 73.17513),
    (33.56662, 73.17548),
    (33.56653, 73.17562),
    (33.56623, 73.17561),
    (33.56604, 73.1756),
    (33.56603, 73.17584),
    (33.56603, 73.17591),
    (33.56588, 73.17596),
    (33.56587, 73.17597),
    (33.5658, 73.176),
    (33.56573, 73.17603),
    (33.56567, 73.17608),
    (33.56565, 73.1761),
    (33.56561, 73.17613),
    (33.56556, 73.17616),
    (33.56548, 73.17622),
    (33.56541, 73.17628),
    (33.56536, 73.17633),
    (33.56533, 73.17639),
    (33.56532, 73.17648),
    (33.56534, 73.17659),
    (33.56539, 73.17668),
    (33.5654, 73.1767),
    (33.5655, 73.17677),
    (33.56558, 73.17683),
    (33.56563, 73.17686),
    (33.56567, 73.1769),
    (33.5657, 73.17693),
    (33.56572, 73.177),
    (33.56576, 73.17702),
    (33.56584, 73.17704),
    (33.56595, 73.17705),
    (33.56599, 73.17706),
    (33.566016, 73.1770649),
    (33.5659873, 73.1770642),
]

# --- HELPERS ---
def haversine(lat1, lon1, lat2, lon2):
    R = 6371
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = math.sin(dlat/2)**2 + math.cos(math.radians(lat1))*math.cos(math.radians(lat2))*math.sin(dlon/2)**2
    return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

def heading(lat1, lon1, lat2, lon2):
    dlon = math.radians(lon2 - lon1)
    y = math.sin(dlon) * math.cos(math.radians(lat2))
    x = math.cos(math.radians(lat1)) * math.sin(math.radians(lat2)) - math.sin(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.cos(dlon)
    brng = math.degrees(math.atan2(y, x))
    return (brng + 360) % 360

# --- CAR SIMULATION FUNCTION ---
def simulate_car(device_id, route):
    i = 0
    while True:
        lat, lon = route[i]
        lat2, lon2 = route[(i + 1) % len(route)]

        # Add jitter
        lat += random.uniform(-0.00005, 0.00005)
        lon += random.uniform(-0.00005, 0.00005)

        dist_km = haversine(lat, lon, lat2, lon2)
        spd = dist_km / (INTERVAL/3600)  # km/h
        head = heading(lat, lon, lat2, lon2)

        payload = {
            "device_id": device_id,
            "ts": datetime.now(timezone.utc).isoformat(),
            "lat": lat,
            "lon": lon,
            "alt": 540 + random.uniform(-5, 5),
            "speed_kmh": round(spd, 2),
            "heading": round(head, 1),
            "fix": "3D",
            "sats": random.randint(6, 12),
            "hdop": round(random.uniform(0.6, 2.0), 2),
        }

        try:
            r = requests.post(INGEST_ENDPOINT, json=payload, timeout=5)
            print(f"[{device_id}] POST {r.status_code}", payload["ts"], f"{payload['lat']:.5f},{payload['lon']:.5f}", "speed", payload["speed_kmh"])
        except Exception as e:
            print(f"[{device_id}] POST error:", e)

        i = (i + 1) % (len(route) - 1)
        time.sleep(INTERVAL)

# --- MAIN ---
if __name__ == "__main__":
    # Create threads for each car
    threading.Thread(target=simulate_car, args=("SIM_ISB_1", JINNAH_GARDEN_ROUTE_1), daemon=True).start()
    threading.Thread(target=simulate_car, args=("SIM_ISB_2", JINNAH_GARDEN_ROUTE_2), daemon=True).start()

    # Keep main thread alive
    while True:
        time.sleep(1)